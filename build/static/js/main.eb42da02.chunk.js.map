{"version":3,"sources":["helpers/history.js","services/user.js","components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["history","createBrowserHistory","userService","login","username","password","requestOptions","method","headers","Content-Type","body","JSON","stringify","fetch","then","handleResponse","user","localStorage","setItem","push","logout","removeItem","response","text","data","parse","ok","status","error","message","statusText","Promise","reject","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleSubmit","console","log","state","preventDefault","_this$state","email","length","react_default","a","createElement","className","onSubmit","FormGroup","controlId","bsSize","FormControl","autoFocus","type","onChange","Button","block","disabled","validateForm","align","Component","App","handlePassChange","bind","assertThisInitialized","handleUserChange","dismissError","e","Login_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb42da02.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","// import config from 'config';\nimport { history } from \"../helpers/history\";\n\nexport const userService = {\n    login,\n    logout\n};\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    // return fetch(`${config.apiUrl}/users/authenticate`, requestOptions)\n    return fetch(`/users/authenticate`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('user', JSON.stringify(user));\n            history.push(\"/user_notes\")\n\n            return user;\n        });\n}\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('user');\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                // auto logout if 401 response returned from api\n                logout();\n                // location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}\n","import React, { Component } from \"react\";\n// import * as ReactBootstrap from 'react-bootstrap';\nimport { Button, FormGroup, FormControl } from \"react-bootstrap\";\nimport \"../css/Login.css\";\nimport { userService } from \"../services/user\";\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  }\n\n  validateForm() {\n    return this.state.email.length > 0 && this.state.password.length > 0;\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.id]: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    console.log(this.state);\n    event.preventDefault();\n    const { username, password } = this.state;\n    userService.login(username, password);\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <form onSubmit={this.handleSubmit}>\n          <FormGroup controlId=\"email\" bsSize=\"large\">\n            Email<br/>\n            <FormControl\n              autoFocus\n              type=\"email\"\n              value={this.state.email}\n              onChange={this.handleChange}\n            />\n          </FormGroup>\n          <FormGroup controlId=\"password\" bsSize=\"large\">\n            Password<br/>\n            <FormControl\n              value={this.state.password}\n              onChange={this.handleChange}\n              type=\"password\"\n            />\n          </FormGroup>\n          <Button\n            block\n            bsSize=\"large\"\n            disabled={!this.validateForm()}\n            type=\"submit\"\n            align=\"center\"\n            className=\"btn btn-primary\"\n          >\n            Login\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './components/Login';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: '',\n      password: '',\n      error: '',\n    };\n\n    this.handlePassChange = this.handlePassChange.bind(this);\n    this.handleUserChange = this.handleUserChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.dismissError = this.dismissError.bind(this);\n  }\n\n  dismissError() {\n    this.setState({ error: '' });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.state.username) {\n      return this.setState({ error: 'Username is required' });\n    }\n\n    if (!this.state.password) {\n      return this.setState({ error: 'Password is required' });\n    }\n\n    return this.setState({ error: '' });\n  }\n\n  handleUserChange(e) {\n    this.setState({\n      username: e.target.value,\n    });\n  };\n\n  handlePassChange(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n\n  render() {\n    // NOTE: I use data-attributes for easier E2E testing\n    // but you don't need to target those (any css-selector will work)\n\n    return (\n      <div className=\"Login\">\n        <Login/>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}